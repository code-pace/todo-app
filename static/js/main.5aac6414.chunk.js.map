{"version":3,"sources":["components/Form.js","components/DoItems.js","App.js","index.js"],"names":["Form","getText","keepEventState","inputText","bgLight","className","onSubmit","type","placeholder","onChange","value","DoItems","todoList","setTodolist","checkTodoStatus","clearCompleted","showTodo","identifyCount","checkTodo","dragTodo","handleDragEvent","onDragEnd","droppableId","provided","droppableProps","ref","innerRef","map","list","index","todo","status","id","hour","mins","day","fullYear","month","timeInterval","changeStatus","doList","draggableId","draggableProps","dragHandleProps","onClick","xmlns","width","height","fill","stroke","strokeWidth","d","filter","fillRule","length","App","useState","setInputText","setCheckTodo","setShowTodo","setIdentifyCount","setBglight","setDragTodo","useEffect","setUpTodo","getTodo","saveTodo","localStorage","setItem","JSON","stringify","getSavedTodo","parse","getItem","console","log","item","fill-rule","e","write","target","preventDefault","undefined","alert","Date","getDate","getHours","getMinutes","getFullYear","getMonth","setHour","Math","random","result","destination","dragNdrop","drag","splice","source","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5aac6414.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Form = ({getText, keepEventState, inputText, bgLight}) => {\r\n    return (\r\n        <div className = {`text-section ${bgLight? \"text-section-light\": \"\"}`}>\r\n            <form onSubmit={keepEventState} className=\"textBox\">\r\n                <div>\r\n                    <button type=\"submit\">\r\n                    <i className=\"fas fa-plus\"></i>\r\n                    </button>\r\n                </div>\r\n                <input placeholder=\"Create a new todo...\" type=\"text\" onChange={getText} value={inputText} />\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Form\r\n","import React from 'react';\r\nimport {DragDropContext, Droppable, Draggable} from 'react-beautiful-dnd';\r\n\r\nconst DoItems = ({todoList, setTodolist, checkTodoStatus, clearCompleted, showTodo, identifyCount, checkTodo, bgLight, dragTodo, handleDragEvent}) => {\r\n    \r\n    return (\r\n        <DragDropContext onDragEnd={handleDragEvent}>\r\n            <Droppable droppableId={`todo-section ${bgLight? \"todo-section-light\": \"\"}`}>\r\n                {(provided) => \r\n                    <div className={`todo-section ${bgLight? \"todo-section-light\": \"\"}`} {...provided.droppableProps} ref={provided.innerRef}>\r\n                    {dragTodo.map((list,index) => {\r\n                        const {todo, status, id, hour, mins, day, fullYear, month, timeInterval} = list;\r\n                        const changeStatus =()=> {\r\n                            setTodolist(todoList.map((doList) => {\r\n                                if(doList.id === id) {\r\n                                    return {...doList, status: !status}\r\n                                }\r\n                                return doList\r\n                            }))\r\n                        }\r\n                        \r\n                        return (\r\n                            <Draggable draggableId={`${id}`} key={id} index={index}>\r\n                                {(provided) => \r\n                                    <div className=\"list\" ref={provided.innerRef} {...provided.draggableProps} {...provided.dragHandleProps}>\r\n                                    <div className=\"todo-items\">\r\n                                        <div>\r\n                                            <button className={`${status?\"btn-check\":\"\"}`} onClick={changeStatus}>\r\n                                                {status? <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"11\" height=\"9\"><path fill=\"none\" stroke=\"#FFF\" strokeWidth=\"2\" d=\"M1 4.304L3.696 7l6-6\"/></svg>: \"\"}\r\n                                            </button>\r\n                                            <p className={`${status?\"todo-stroke\":\"\"}`}>{todo}</p>\r\n                                        </div>\r\n                                        \r\n                                        <div>\r\n                                            <button className=\"del\" onClick={()=> {\r\n                                                setTodolist(todoList.filter(todo => todo.id !== id))\r\n                                            }}>\r\n                                                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" height=\"18\"><path fill=\"#494C6B\" fillRule=\"evenodd\" d=\"M16.97 0l.708.707L9.546 8.84l8.132 8.132-.707.707-8.132-8.132-8.132 8.132L0 16.97l8.132-8.132L0 .707.707 0 8.84 8.132 16.971 0z\"/></svg>\r\n                                            </button>\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"todo-time\">\r\n                                        <p><i className=\"far fa-clock\"></i> {` ${hour}:${mins} ${timeInterval}`}</p>\r\n                                        <p>{`${day}/${month}/${fullYear}`}</p>\r\n                                    </div>\r\n                                </div>\r\n                                }\r\n                            </Draggable>\r\n                        )\r\n                    })}\r\n                    <div className=\"todo-options\">\r\n                        <div className=\"items-left\">\r\n                            {`${showTodo.length} items ${identifyCount}`}\r\n                        </div>\r\n                        <div className=\"todo-action\">\r\n                            <div className=\"all\">\r\n                                <button className={`${checkTodo === \"all\" ? \"status\": \"\"}`} value=\"all\" onClick={checkTodoStatus}>All</button>\r\n                            </div>\r\n                            <div className=\"active\">\r\n                                <button className={`${checkTodo === \"active\" ? \"status\": \"\"}`} value=\"active\" onClick={checkTodoStatus}>Active</button>\r\n                            </div>\r\n                            <div className=\"completed\">\r\n                                <button className={`${checkTodo === \"completed\" ? \"status\": \"\"}`} value=\"completed\" onClick={checkTodoStatus}>Completed</button>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"clear-completed\">\r\n                            <button value=\"clear-completed\" onClick={clearCompleted}>Clear Completed</button>\r\n                        </div>\r\n                    </div>\r\n                    {provided.placeholder}\r\n                </div>\r\n                }\r\n            </Droppable>\r\n        </DragDropContext>\r\n        \r\n    )\r\n}\r\n\r\nexport default DoItems\r\n","import './App.css';\nimport React, {useState, useEffect} from \"react\";\nimport Form from \"./components/Form\";\nimport DoItems from './components/DoItems';\n\nfunction App() {\n  const [inputText, setInputText] = useState(\"\");\n  const [todoList, setTodolist] = useState([]);\n  const [checkTodo, setCheckTodo] = useState(\"all\");\n  const [showTodo, setShowTodo] = useState([]);\n  const [identifyCount, setIdentifyCount] = useState(\"\");\n  const [bgLight, setBglight] = useState(false);\n  const [dragTodo, setDragTodo] = useState([]);\n\n  useEffect(()=> {\n    setUpTodo();\n  },[todoList, checkTodo]);\n  \n  useEffect(()=> {\n    setDragTodo(showTodo);\n  }, [showTodo]);\n  \n  useEffect(()=> {\n    getTodo();\n  }, []);\n\n  useEffect(()=> {\n    saveTodo();\n  }, [dragTodo]);\n\n  const saveTodo=()=> {\n    localStorage.setItem(\"todo\", JSON.stringify(dragTodo));\n  }\n  const getTodo =()=> {\n    const getSavedTodo = JSON.parse(localStorage.getItem(\"todo\"));\n    console.log(getSavedTodo)\n    if(getSavedTodo && getSavedTodo.length > 0) {\n      setTodolist(getSavedTodo)\n      console.log(dragTodo);\n    }\n    else {\n      localStorage.setItem(\"todo\", JSON.stringify(dragTodo));\n      console.log(\"nothing dey there\");\n    }\n  }\n\n  const handleDragEvent =(result) => {\n    console.log(result);\n    if(!result.destination) return;\n    const dragNdrop = [...dragTodo];\n    console.log(dragNdrop)\n    const drag = dragNdrop.splice(result.source.index, 1);\n    console.log(drag)\n    dragNdrop.splice(result.destination.index, 0, ...drag);\n    console.log(dragNdrop);\n    setDragTodo(dragNdrop)\n  }\n  const clearCompleted =()=> {\n    setTodolist(todoList.filter(item => item.status !== true));\n  }\n  const getText =(e)=> {\n    let write = e.target.value;\n    setInputText(write);\n  }\n  const keepEventState = (e)=> {\n    e.preventDefault();\n    if(inputText === null || inputText === undefined || inputText.length === 0) {\n      alert(\"add something now\")\n    }\n    else {\n      const day = new Date().getDate();\n      const hour = new Date().getHours();\n      const mins = new Date().getMinutes()\n      const fullYear = new Date().getFullYear();\n      const month = new Date().getMonth() + 1;\n      const timeInterval =()=> {\n        if(hour === 0 || hour <= 11) {\n          return \"AM\"\n        } else {\n          return \"PM\"\n        }\n      }\n      const setHour =()=> {\n        switch (hour) {\n          case 13: \n            return 1\n            break;\n          case 14:\n            return 2\n            break;\n          case 15:\n            return 3\n            break;\n          case 16:\n            return 4\n            break;\n          case 17:\n            return 5\n            break;\n          case 18:\n            return 6\n            break;\n          case 19:\n            return 7\n            break;\n          case 20:\n            return 8\n            break;\n          case 21:\n            return 9\n            break;\n          case 22:\n            return 10\n            break;\n          case 23:\n            return 11\n            break;\n          default:\n            return hour\n            break\n        }\n      }\n      setTodolist([{todo: inputText, status: false, timeInterval: timeInterval(), day: day, hour: setHour(), month: month, mins: mins, fullYear: fullYear, id: Math.random()*1000}, ...todoList])\n      setInputText(\"\");\n      e.target.value = \"\";\n    }\n  }\n  \n  const checkTodoStatus =(e)=> {  \n    setCheckTodo(e.target.value);\n  }\n  const setUpTodo =()=> {\n    switch(checkTodo) {\n      case \"active\" :\n        setShowTodo(todoList.filter(item => item.status === false));\n        setIdentifyCount(\"active\");\n        break;\n      case \"completed\" :\n        setShowTodo(todoList.filter(item => item.status === true));\n        setIdentifyCount(\"completed\");\n        break;\n      default: \n        setShowTodo(todoList);\n        setIdentifyCount(\"left\");\n        break;\n    }\n  }\n  const changeBg =()=> {\n    setBglight(!bgLight);\n  }\n  \n\n  return (\n    <div className={`App ${bgLight?\"bg-light\":\"\"}`}>\n      <div className=\"container\">\n        <header className={`todo-header ${bgLight? \"todo-headerII\": \"\"}`}>\n          <div className=\"set-bg\">\n            <div className=\"bg-mode\">\n              <h1>TODO</h1>\n              <button onClick={changeBg} className=\"bg-btn\">\n                {bgLight? <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"26\" height=\"26\"><path fill=\"#FFF\" fill-rule=\"evenodd\" d=\"M13 0c.81 0 1.603.074 2.373.216C10.593 1.199 7 5.43 7 10.5 7 16.299 11.701 21 17.5 21c2.996 0 5.7-1.255 7.613-3.268C23.22 22.572 18.51 26 13 26 5.82 26 0 20.18 0 13S5.82 0 13 0z\"/></svg>: <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"26\" height=\"26\"><path fill=\"#FFF\" fill-rule=\"evenodd\" d=\"M13 21a1 1 0 011 1v3a1 1 0 11-2 0v-3a1 1 0 011-1zm-5.657-2.343a1 1 0 010 1.414l-2.121 2.121a1 1 0 01-1.414-1.414l2.12-2.121a1 1 0 011.415 0zm12.728 0l2.121 2.121a1 1 0 01-1.414 1.414l-2.121-2.12a1 1 0 011.414-1.415zM13 8a5 5 0 110 10 5 5 0 010-10zm12 4a1 1 0 110 2h-3a1 1 0 110-2h3zM4 12a1 1 0 110 2H1a1 1 0 110-2h3zm18.192-8.192a1 1 0 010 1.414l-2.12 2.121a1 1 0 01-1.415-1.414l2.121-2.121a1 1 0 011.414 0zm-16.97 0l2.121 2.12A1 1 0 015.93 7.344L3.808 5.222a1 1 0 011.414-1.414zM13 0a1 1 0 011 1v3a1 1 0 11-2 0V1a1 1 0 011-1z\"/></svg>}\n              </button>\n            </div>\n            <Form getText={getText} keepEventState={keepEventState} inputText={inputText} bgLight={bgLight} />\n          </div>\n          \n        </header>\n        <div className=\"todo-container\">\n        <DoItems dragTodo={dragTodo} todoList={todoList} setTodolist={setTodolist} checkTodoStatus={checkTodoStatus} clearCompleted={clearCompleted} showTodo={showTodo} identifyCount={identifyCount} checkTodo={checkTodo} bgLight={bgLight} handleDragEvent={handleDragEvent} />\n        <p className=\"text\">Drag and drop to reorder list</p>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}